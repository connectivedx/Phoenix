/// Returns the requested color from a color map.
/// @param {String} $color - The requested key from the color map.
/// @param {String} $colorMap [$colors] - The map containing your colors.
/// @return {String} The key's value from the color map.
/// @example
/// color(primary)
/// // returns the result of map-get($colors, primary)
/// @example
/// color(action, (colorMap: $otherColorMap))
/// // returns the result of map-get($otherColorMap, action)
@function color($color, $options: ()) {
	$options: map-merge((
		colorMap: $colors
	), $options);

	$colorMap: map-get($options, colorMap);

	// check if the color is in the map
	@if map-has-key($colorMap, $color) {
		$color: map-get($colorMap, $color);

		// recursive call to double-check for semantic color references
		@if map-has-key($colorMap, $color) {
			$color: color($color, $colorMap);
		}
	}
	@else {
		@warn "The color `#{$color}` is not a key in your color map.";

		@return null;
	}

	@return $color;
}