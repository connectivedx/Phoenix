/// Outputs a high DPI "retina" image for the given property with a low DPI fallback.
/// @param {String} $imageName - The filename, without an extension, of the image file.
/// @param {String} $backgroundSize ['none'] - The size of the background image (used to scale down 2x images).
/// @param {String} $retinaFileSuffix ['@2x'] - The filename suffix used for the "retina" version of the image.
/// @param {String} $backgroundRepeat [no-repeat] - Whether to repeat the background image.
/// @param {String} $property [background-image] - The CSS property to which you wish to apply the image.
/// @example
/// retina-image(logo)
/// @example
/// retina-image(bullet-blue, (property: list-style-image))
@mixin retina-image($imageName, $options: ()) {
	$options: map-merge((
		backgroundSize: 'none',
		retinaFileSuffix: '@2x',
		backgroundRepeat: no-repeat,
		property: background-image
	), $options);

	$backgroundSize: map-get($options, backgroundSize);
	$retinaFileSuffix: map-get($options, retinaFileSuffix);
	$backgroundRepeat: map-get($options, backgroundRepeat);
	$property: map-get($options, property);

	$imageNameRetina: str-insert($imageName, $retinaFileSuffix, -5);

	#{$property}: image($imageName);
	background-repeat: $backgroundRepeat;

	@if ($backgroundSize != 'none') {
		background-size: $backgroundSize;
	}

	@include high-dpi() {
		#{$property}: image($imageNameRetina);
	}
}