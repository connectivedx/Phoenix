////
/// @group semantic-grid
////

/// Creates a semantic-grid row.
/// @param {String} $nested [false] - Whether or not the row will be nested within other rows.
/// @param {Pixels | Ems} $padding [$gutterInPx] - A padding override to be set on the row.
/// @param {Pixels | Percentage} $maxWidth [$rowMaxWidth] - A max-width override to be set on the row.
/// @example
/// row()
/// @example
/// row((nested: false))
/// @example
/// row((padding: 0 50px 0 0))
@mixin row($options: ()) {
	$options: map-merge((
		nested: false,
		padding: $columnPadding,
		maxWidth: $rowMaxWidth
	), $options);

	$nested: map-get($options, nested);
	$padding: map-get($options, padding);
	$maxWidth: map-get($options, maxWidth);

	@extend %clearfix;
	margin-left: 0;
	margin-right: 0;
	min-width: 0;
	width: auto;

	@if $nested == true {
		margin-top: $columnPadding;
		padding: 0;

		&:first-child {
			margin-top: 0;
		}
	}
	@else {
		padding: $padding;
	}

	@include media(medium) {
		@if $nested == true {
			max-width: none;
			min-width: 0px;
			padding: 0;
			width: auto;
		}
		@else {
			margin: 0 auto;
			max-width: $maxWidth;
			width: 100%;
		}
	}
}

/// Creates a semantic-grid set of columns based on the base grid system settings.  On low resolutions, the columns will stack and will break at the breakpoint provided to the number of columns specified.
/// @param {Number} $columns - The number of columns you wish your element's width to occupy.  Note that this can be an integer or decimal.
/// @param {Number} $position [false] - The column you want your element's positioned to begin.  This is 1-indexed, so possible values are 1 through `$columns` defined in `variables/_grid.scss`.
/// @param {Pixels | Ems} $padding [$gutterInPx] - A padding override to be set on the row.
/// @param {String} $breakpoint [$columnBreakpoint] - The breakpoint at which the element's width changes from 100% to the column width specified.
/// @param {String} $nested [false] - Whether or not the columns will be contained within a nested row.
/// @param {String} $alignment [false] - Whether or not the columns will be centered within a row.
/// @param {Boolean} $includeGutterWidth [true] - Whether or not the column width will include the gutter width in its calculation.
/// @example
/// column(8)
/// @example
/// column(8, (padding: 10px))
@mixin column($columns, $options: ()) {
	$options: map-merge((
		position: false,
		padding: $columnPadding,
		breakpoint: $columnBreakpoint,
		nested: false,
		alignment: false,
		includeGutterWidth: true
	), $options);

	$position: map-get($options, position);
	$padding: map-get($options, padding);
	$breakpoint: map-get($options, breakpoint);
	$nested: map-get($options, nested);
	$alignment: map-get($options, alignment);
	$includeGutterWidth: map-get($options, includeGutterWidth);

	@if $alignment == centered {
		@extend %column-config;
		padding: $padding;

		@include media($breakpoint) {
			clear: both;
			margin-left: centered($columns, $options);
			margin-top: 0;
			width: columns($columns, $options);
		}

		&:first-child {
			margin-top: 0;
		}
	}
	@else {
		@extend %column-config;
		padding: $padding;

		@if $nested == true {
			margin-top: $columnPadding;

			&:first-child {
				margin-top: 0;
			}
		}

		@include media($breakpoint) {
			@if $position != false {
				margin-left: columnPosition($position, $options);
				margin-right: -100%;
			}
			@else if $includeGutterWidth == true {
				margin-left: $gutterWidth;

				&:first-child {
					margin-left: 0;
				}
			}

			margin-top: 0;
			width: columns($columns, $options);
		}
	}
}